// Code generated by MockGen. DO NOT EDIT.
// Source: vendor/github.com/uber-common/bark/interface.go

// Package mock_bark is a generated GoMock package.
package mock_bark

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method
func (m *MockLogger) Debug(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug
func (mr *MockLoggerMockRecorder) Debug(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), args...)
}

// Debugf mocks base method
func (m *MockLogger) Debugf(format string, args ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf
func (mr *MockLoggerMockRecorder) Debugf(format interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Info mocks base method
func (m *MockLogger) Info(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info
func (mr *MockLoggerMockRecorder) Info(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), args...)
}

// Infof mocks base method
func (m *MockLogger) Infof(format string, args ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof
func (mr *MockLoggerMockRecorder) Infof(format interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Warn mocks base method
func (m *MockLogger) Warn(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn
func (mr *MockLoggerMockRecorder) Warn(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), args...)
}

// Warnf mocks base method
func (m *MockLogger) Warnf(format string, args ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf
func (mr *MockLoggerMockRecorder) Warnf(format interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// Error mocks base method
func (m *MockLogger) Error(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockLoggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), args...)
}

// Errorf mocks base method
func (m *MockLogger) Errorf(format string, args ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Fatal mocks base method
func (m *MockLogger) Fatal(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal
func (mr *MockLoggerMockRecorder) Fatal(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), args...)
}

// Fatalf mocks base method
func (m *MockLogger) Fatalf(format string, args ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf
func (mr *MockLoggerMockRecorder) Fatalf(format interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// Panic mocks base method
func (m *MockLogger) Panic(args ...interface{}) {
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic
func (mr *MockLoggerMockRecorder) Panic(args ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), args...)
}

// Panicf mocks base method
func (m *MockLogger) Panicf(format string, args ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf
func (mr *MockLoggerMockRecorder) Panicf(format interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockLogger)(nil).Panicf), varargs...)
}

// WithField mocks base method
func (m *MockLogger) WithField(key string, value interface{}) Logger {
	ret := m.ctrl.Call(m, "WithField", key, value)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// WithField indicates an expected call of WithField
func (mr *MockLoggerMockRecorder) WithField(key, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*MockLogger)(nil).WithField), key, value)
}

// WithFields mocks base method
func (m *MockLogger) WithFields(keyValues LogFields) Logger {
	ret := m.ctrl.Call(m, "WithFields", keyValues)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// WithFields indicates an expected call of WithFields
func (mr *MockLoggerMockRecorder) WithFields(keyValues interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFields", reflect.TypeOf((*MockLogger)(nil).WithFields), keyValues)
}

// WithError mocks base method
func (m *MockLogger) WithError(err error) Logger {
	ret := m.ctrl.Call(m, "WithError", err)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// WithError indicates an expected call of WithError
func (mr *MockLoggerMockRecorder) WithError(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithError", reflect.TypeOf((*MockLogger)(nil).WithError), err)
}

// Fields mocks base method
func (m *MockLogger) Fields() Fields {
	ret := m.ctrl.Call(m, "Fields")
	ret0, _ := ret[0].(Fields)
	return ret0
}

// Fields indicates an expected call of Fields
func (mr *MockLoggerMockRecorder) Fields() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockLogger)(nil).Fields))
}

// MockLogFields is a mock of LogFields interface
type MockLogFields struct {
	ctrl     *gomock.Controller
	recorder *MockLogFieldsMockRecorder
}

// MockLogFieldsMockRecorder is the mock recorder for MockLogFields
type MockLogFieldsMockRecorder struct {
	mock *MockLogFields
}

// NewMockLogFields creates a new mock instance
func NewMockLogFields(ctrl *gomock.Controller) *MockLogFields {
	mock := &MockLogFields{ctrl: ctrl}
	mock.recorder = &MockLogFieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogFields) EXPECT() *MockLogFieldsMockRecorder {
	return m.recorder
}

// Fields mocks base method
func (m *MockLogFields) Fields() map[string]interface{} {
	ret := m.ctrl.Call(m, "Fields")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Fields indicates an expected call of Fields
func (mr *MockLogFieldsMockRecorder) Fields() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fields", reflect.TypeOf((*MockLogFields)(nil).Fields))
}

// MockStatsReporter is a mock of StatsReporter interface
type MockStatsReporter struct {
	ctrl     *gomock.Controller
	recorder *MockStatsReporterMockRecorder
}

// MockStatsReporterMockRecorder is the mock recorder for MockStatsReporter
type MockStatsReporterMockRecorder struct {
	mock *MockStatsReporter
}

// NewMockStatsReporter creates a new mock instance
func NewMockStatsReporter(ctrl *gomock.Controller) *MockStatsReporter {
	mock := &MockStatsReporter{ctrl: ctrl}
	mock.recorder = &MockStatsReporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatsReporter) EXPECT() *MockStatsReporterMockRecorder {
	return m.recorder
}

// IncCounter mocks base method
func (m *MockStatsReporter) IncCounter(name string, tags Tags, value int64) {
	m.ctrl.Call(m, "IncCounter", name, tags, value)
}

// IncCounter indicates an expected call of IncCounter
func (mr *MockStatsReporterMockRecorder) IncCounter(name, tags, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncCounter", reflect.TypeOf((*MockStatsReporter)(nil).IncCounter), name, tags, value)
}

// UpdateGauge mocks base method
func (m *MockStatsReporter) UpdateGauge(name string, tags Tags, value int64) {
	m.ctrl.Call(m, "UpdateGauge", name, tags, value)
}

// UpdateGauge indicates an expected call of UpdateGauge
func (mr *MockStatsReporterMockRecorder) UpdateGauge(name, tags, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockStatsReporter)(nil).UpdateGauge), name, tags, value)
}

// RecordTimer mocks base method
func (m *MockStatsReporter) RecordTimer(name string, tags Tags, d time.Duration) {
	m.ctrl.Call(m, "RecordTimer", name, tags, d)
}

// RecordTimer indicates an expected call of RecordTimer
func (mr *MockStatsReporterMockRecorder) RecordTimer(name, tags, d interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordTimer", reflect.TypeOf((*MockStatsReporter)(nil).RecordTimer), name, tags, d)
}
